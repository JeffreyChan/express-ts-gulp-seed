{"version":3,"sources":["api/middlewares/base.ts"],"names":[],"mappings":";AAEA,IAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AACpC,IAAO,UAAU,WAAW,aAAa,CAAC,CAAC;AAC3C,IAAO,YAAY,WAAW,eAAe,CAAC,CAAC;AAC/C,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,IAAO,cAAc,WAAW,kBAAkB,CAAC,CAAC;AAEpD;IAAA;IAgDA,CAAC;IA9CG,sBAAW,gCAAa;aAAxB;YACI,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;YAEpB,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACvB,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACpD,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;YAExB,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC;YAExC,iBAAiB;YAEjB,yCAAyC;YACzC,GAAG,CAAC,GAAG,CAAC,UAAC,GAAY,EAAE,GAAa,EAAE,IAAc;gBAChD,IAAI,GAAG,GAAQ,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;gBACtC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,iBAAiB;YAEjB,4BAA4B;YAC5B,wBAAwB;YACxB,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC;gBACnC,GAAG,CAAC,GAAG,CAAC,UAAC,GAAQ,EAAE,GAAY,EAAE,GAAa,EAAE,IAAc;oBAC1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;oBAC9B,GAAG,CAAC,IAAI,CAAC;wBACL,OAAO,EAAE,GAAG,CAAC,OAAO;wBACpB,KAAK,EAAE,GAAG;qBACb,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC;YAED,2BAA2B;YAC3B,gCAAgC;YAChC,GAAG,CAAC,GAAG,CAAC,UAAC,GAAQ,EAAE,GAAY,EAAE,GAAa,EAAE,IAAc;gBAC1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;gBAC9B,GAAG,CAAC,IAAI,CAAC;oBACL,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,KAAK,EAAE,EAAE;iBACZ,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAGH,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;;;OAAA;IACL,sBAAC;AAAD,CAhDA,AAgDC,IAAA;AACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7B,iBAAS,eAAe,CAAC","file":"api/middlewares/base.js","sourcesContent":["import {Request, Response} from \"express\";\r\n\r\nimport express = require(\"express\");\r\nimport bodyParser = require(\"body-parser\");\r\nimport cookieParser = require('cookie-parser');\r\nimport logger = require('morgan');\r\nimport methodoverride = require(\"./methodoverride\");\r\n\r\nclass BaseMiddlerware {\r\n\r\n    static get configuration() {\r\n        var app = express();\r\n\r\n        app.use(logger('dev'));\r\n        app.use(bodyParser.json());\r\n        app.use(bodyParser.urlencoded({ extended: false }));\r\n        app.use(cookieParser());\r\n\r\n        app.use(methodoverride.configuration());\r\n\r\n        //router settings\r\n        \r\n        // catch 404 and forward to error handler\r\n        app.use((req: Request, res: Response, next: Function) => {\r\n            var err: any = new Error('Not Found');\r\n            err.status = 404;\r\n            next(err);\r\n        });\r\n\r\n        // error handlers\r\n\r\n        // development error handler\r\n        // will print stacktrace\r\n        if (app.get('env') === 'development') {\r\n            app.use((err: any, req: Request, res: Response, next: Function) => {\r\n                res.status(err.status || 500);\r\n                res.json({\r\n                    message: err.message,\r\n                    error: err\r\n                });\r\n            });\r\n        }\r\n\r\n        // production error handler\r\n        // no stacktraces leaked to user\r\n        app.use((err: any, req: Request, res: Response, next: Function) => {\r\n            res.status(err.status || 500);\r\n            res.json({\r\n                message: err.message,\r\n                error: {}\r\n            });\r\n        });\r\n        \r\n\r\n        return app;\r\n    }\r\n}\r\nObject.seal(BaseMiddlerware);\r\nexport = BaseMiddlerware;"],"sourceRoot":"/source/"}